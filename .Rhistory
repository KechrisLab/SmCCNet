# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 5, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 3, ncomp_pls = 2)
library(SmCCNet)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 5, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 3, ncomp_pls = 2)
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 5, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 3, ncomp_pls = 2)
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 5, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 3, ncomp_pls = 2)
Ws <- getRobustPseudoWeightsMultiBinary(data1,
outcome,
SubsamplingPercent= SubsamplingPercent,
Between_Discriminate_Ratio = Between_Discriminate_Ratio,
LambdaBetween = c(0.9,0.6),
LambdaPheno = 0.7,
SubsamplingNum = 50,
CCcoef = 1,
ncomp_pls = 2, EvalClassifier = FALSE)
View(Ws)
knitr::opts_chunk$set(echo = TRUE)
s <- c(s1, s2)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
s <- c(s1, s2)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
View(Ws)
X <- list(X1,X2)
# run between-omics SmCCA
BetweenOmicsWeight <- getRobustPseudoWeightsMulti(X, Trait = NULL, NoTrait = TRUE, CCcoef = CCcoef,
Lambda = LambdaBetween, s = SubsamplingPercent, SubsamplingNum = SubsamplingNum)
LambdaBetween <- c(0.9,0.6)
# run between-omics SmCCA
BetweenOmicsWeight <- getRobustPseudoWeightsMulti(X, Trait = NULL, NoTrait = TRUE, CCcoef = CCcoef,
Lambda = LambdaBetween, s = SubsamplingPercent, SubsamplingNum = SubsamplingNum)
View(BetweenOmicsWeight)
# column bind all data
X_all <- rlist::list.cbind(X)
# Feature type index
type_index <- unlist(purrr::map(1:length(X), function(h){
rep(h, ncol(X[[h]]))
}))
# create empty matrix to store the omics-phenotype weight
OmicsPhenoWeight <- matrix(0, nrow = nrow(BetweenOmicsWeight), ncol = ncol(BetweenOmicsWeight))
# run omics-phenotype PLS
for (iii in 1:ncol(BetweenOmicsWeight))
{
# subset selected features
X_subset <- X_all[ ,which(BetweenOmicsWeight[,iii] != 0)]
# run omics-phenotype SmCCA based on selected molecular features
has_error <- FALSE
tryCatch({
# run omics-phenotype SmCCA based on selected molecular features
Ws_pheno <- getRobustPseudoWeight_binary(X1 = X_subset, Trait = as.matrix(Y), Lambda1 = LambdaPheno,
s1 = 1, SubsamplingNum = 1, K = ncomp_pls)
# store omics-phenotype canonical weight
OmicsPhenoWeight[which(BetweenOmicsWeight[,iii] != 0),iii] <- as.numeric(Ws_pheno)
},
error = function(e) {
cat("Caught an error:", e$message, "on iteration", iii, "\n")
has_error <- TRUE
})
# skip current iteration if error occurs
if (has_error) {
next  # Skip to the next iteration
}
# normalize each data type
for (j in 1:length(X))
{
OmicsPhenoWeight[which(type_index == j),iii] <- OmicsPhenoWeight[which(type_index == j),iii]/pracma::Norm(OmicsPhenoWeight[which(type_index == j),iii])
}
}
LambdaPheno <- 0.7
# run omics-phenotype PLS
for (iii in 1:ncol(BetweenOmicsWeight))
{
# subset selected features
X_subset <- X_all[ ,which(BetweenOmicsWeight[,iii] != 0)]
# run omics-phenotype SmCCA based on selected molecular features
has_error <- FALSE
tryCatch({
# run omics-phenotype SmCCA based on selected molecular features
Ws_pheno <- getRobustPseudoWeight_binary(X1 = X_subset, Trait = as.matrix(Y), Lambda1 = LambdaPheno,
s1 = 1, SubsamplingNum = 1, K = ncomp_pls)
# store omics-phenotype canonical weight
OmicsPhenoWeight[which(BetweenOmicsWeight[,iii] != 0),iii] <- as.numeric(Ws_pheno)
},
error = function(e) {
cat("Caught an error:", e$message, "on iteration", iii, "\n")
has_error <- TRUE
})
# skip current iteration if error occurs
if (has_error) {
next  # Skip to the next iteration
}
# normalize each data type
for (j in 1:length(X))
{
OmicsPhenoWeight[which(type_index == j),iii] <- OmicsPhenoWeight[which(type_index == j),iii]/pracma::Norm(OmicsPhenoWeight[which(type_index == j),iii])
}
}
View(OmicsPhenoWeight)
iii <- 1
# subset selected features
X_subset <- X_all[ ,which(BetweenOmicsWeight[,iii] != 0)]
View(X_subset)
X_subset - X_subset
# run omics-phenotype SmCCA based on selected molecular features
Ws_pheno <- getRobustPseudoWeight_binary(X1 = X_subset, Trait = as.matrix(Y), Lambda1 = LambdaPheno,
s1 = 1, SubsamplingNum = 1, K = ncomp_pls)
View(Ws_pheno)
which(BetweenOmicsWeight[,iii] != 0)
# store omics-phenotype canonical weight
OmicsPhenoWeight[which(BetweenOmicsWeight[,iii] != 0),iii] <- as.numeric(Ws_pheno)
# create empty matrix to store the omics-phenotype weight
OmicsPhenoWeight <- matrix(0, nrow = nrow(BetweenOmicsWeight), ncol = ncol(BetweenOmicsWeight))
# run omics-phenotype PLS
for (iii in 1:ncol(BetweenOmicsWeight))
{
# subset selected features
X_subset <- X_all[ ,which(BetweenOmicsWeight[,iii] != 0)]
# run omics-phenotype SmCCA based on selected molecular features
# run omics-phenotype SmCCA based on selected molecular features
Ws_pheno <- getRobustPseudoWeight_binary(X1 = X_subset, Trait = as.matrix(Y), Lambda1 = LambdaPheno,
s1 = 1, SubsamplingNum = 1, K = ncomp_pls)
# store omics-phenotype canonical weight
OmicsPhenoWeight[which(BetweenOmicsWeight[,iii] != 0),iii] <- as.numeric(Ws_pheno)
# normalize each data type
for (j in 1:length(X))
{
OmicsPhenoWeight[which(type_index == j),iii] <- OmicsPhenoWeight[which(type_index == j),iii]/pracma::Norm(OmicsPhenoWeight[which(type_index == j),iii])
}
}
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
s <- c(s1, s2)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
library(SmCCNet)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 5, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 3, ncomp_pls = 2)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 3, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 3, ncomp_pls = 2)
spls::splsda
# create empty matrix to store the omics-phenotype weight
OmicsPhenoWeight <- matrix(0, nrow = nrow(BetweenOmicsWeight), ncol = ncol(BetweenOmicsWeight))
iii
i
iii <- 1
# subset selected features
X_subset <- X_all[ ,which(BetweenOmicsWeight[,iii] != 0)]
# run omics-phenotype SmCCA based on selected molecular features
Ws_pheno <- getRobustPseudoWeight_binary(X1 = X_subset, Trait = as.matrix(Y), Lambda1 = LambdaPheno,
s1 = 1, SubsamplingNum = 1, K = ncomp_pls)
# store omics-phenotype canonical weight
OmicsPhenoWeight[which(BetweenOmicsWeight[,iii] != 0),iii] <- as.numeric(Ws_pheno)
# normalize each data type
for (j in 1:length(X))
{
OmicsPhenoWeight[which(type_index == j),iii] <- OmicsPhenoWeight[which(type_index == j),iii]/pracma::Norm(OmicsPhenoWeight[which(type_index == j),iii])
}
{
# subset selected features
X_subset <- X_all[ ,which(BetweenOmicsWeight[,iii] != 0)]
# run omics-phenotype SmCCA based on selected molecular features
# run omics-phenotype SmCCA based on selected molecular features
Ws_pheno <- getRobustPseudoWeight_binary(X1 = X_subset, Trait = as.matrix(Y), Lambda1 = LambdaPheno,
s1 = 1, SubsamplingNum = 1, K = ncomp_pls)
# store omics-phenotype canonical weight
OmicsPhenoWeight[which(BetweenOmicsWeight[,iii] != 0),iii] <- as.numeric(Ws_pheno)
# normalize each data type
for (j in 1:length(X))
{
OmicsPhenoWeight[which(type_index == j),iii] <- OmicsPhenoWeight[which(type_index == j),iii]/pracma::Norm(OmicsPhenoWeight[which(type_index == j),iii])
}
}
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
# run omics-phenotype PLS
for (iii in 1:ncol(BetweenOmicsWeight))
{
# subset selected features
X_subset <- X_all[ ,which(BetweenOmicsWeight[,iii] != 0)]
# run omics-phenotype SmCCA based on selected molecular features
# run omics-phenotype SmCCA based on selected molecular features
Ws_pheno <- getRobustPseudoWeight_binary(X1 = X_subset, Trait = as.matrix(Y), Lambda1 = LambdaPheno,
s1 = 1, SubsamplingNum = 1, K = ncomp_pls)
# store omics-phenotype canonical weight
OmicsPhenoWeight[which(BetweenOmicsWeight[,iii] != 0),iii] <- as.numeric(Ws_pheno)
# normalize each data type
for (j in 1:length(X))
{
OmicsPhenoWeight[which(type_index == j),iii] <- OmicsPhenoWeight[which(type_index == j),iii]/pracma::Norm(OmicsPhenoWeight[which(type_index == j),iii])
}
}
# set part of the between-omics weight to 0
BetweenOmicsWeight[OmicsPhenoWeight == 0] <- 0
# remove all zero columns
if (SubsamplingNum > 1)
{
# find zero columns and NAN columns
zero_cols <- which(apply(OmicsPhenoWeight, 2, function(x) all(x == 0) | any(is.nan(x))))
# remove all these columns
BetweenOmicsWeight <- BetweenOmicsWeight[,-zero_cols]
OmicsPhenoWeight <- OmicsPhenoWeight[,-zero_cols]
}
# aggregate canonical weight (trade-off: between-omics, omics-phenotype)
CCWeight <- (Between_Discriminate_Ratio[1]/sum(Between_Discriminate_Ratio)) * BetweenOmicsWeight +
(Between_Discriminate_Ratio[2]/sum(Between_Discriminate_Ratio)) * OmicsPhenoWeight
# set row names
row.names(CCWeight) <- colnames(X_all)
return(CCWeight)
# run between-omics SmCCA
BetweenOmicsWeight <- getRobustPseudoWeightsMulti(X, Trait = NULL, NoTrait = TRUE, CCcoef = CCcoef,
Lambda = LambdaBetween, s = SubsamplingPercent, SubsamplingNum = SubsamplingNum)
# column bind all data
X_all <- rlist::list.cbind(X)
# Feature type index
type_index <- unlist(purrr::map(1:length(X), function(h){
rep(h, ncol(X[[h]]))
}))
# create empty matrix to store the omics-phenotype weight
OmicsPhenoWeight <- matrix(0, nrow = nrow(BetweenOmicsWeight), ncol = ncol(BetweenOmicsWeight))
# run omics-phenotype PLS
for (iii in 1:ncol(BetweenOmicsWeight))
{
# subset selected features
X_subset <- X_all[ ,which(BetweenOmicsWeight[,iii] != 0)]
# run omics-phenotype SmCCA based on selected molecular features
# run omics-phenotype SmCCA based on selected molecular features
Ws_pheno <- getRobustPseudoWeight_binary(X1 = X_subset, Trait = as.matrix(Y), Lambda1 = LambdaPheno,
s1 = 1, SubsamplingNum = 1, K = ncomp_pls)
# store omics-phenotype canonical weight
OmicsPhenoWeight[which(BetweenOmicsWeight[,iii] != 0),iii] <- as.numeric(Ws_pheno)
# normalize each data type
for (j in 1:length(X))
{
OmicsPhenoWeight[which(type_index == j),iii] <- OmicsPhenoWeight[which(type_index == j),iii]/pracma::Norm(OmicsPhenoWeight[which(type_index == j),iii])
}
}
X
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
as.matrix(Y)
matrix(Y, ncol = 1)
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
s <- c(s1, s2)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
library(SmCCNet)
l[(num_omics + 1)]
knitr::opts_chunk$set(echo = TRUE)
s <- c(s1, s2)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
library(SmCCNet)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
library(SmCCNet)
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 3, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 3, ncomp_pls = 2)
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# run SPLSDA on the subsamples (Figure 1, Step II)
Ws <- getRobustPseudoWeightsMultiBinary(list(X1,X2),
as.numeric(Y),
SubsamplingPercent=s,
Between_Discriminate_Ratio = c(1,1),
LambdaBetween = l[1:num_omics],
LambdaPheno = l[(num_omics + 1)],
SubsamplingNum = 50,
CCcoef = CCcoef,
ncomp_pls = ncomp, EvalClassifier = FALSE)
l[(num_omics + 1)]
library(SmCCNet)
knitr::opts_chunk$set(echo = TRUE)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 3, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 5, ncomp_pls = 2)
library(SmCCNet)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 3, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 5, ncomp_pls = 2)
knitr::opts_chunk$set(echo = TRUE)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 3, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 10, ncomp_pls = 2)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 5, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 5, ncomp_pls = 3)
# multi-omics PLS
result <- fastAutoSmCCNet(X = list(X1,X2), Y = as.factor(Y_binary),
Kfold = 5, subSampNum = 50, DataType = c('Gene', 'miRNA'),
CutHeight = 1 - 0.1^10,
saving_dir = getwd(), EvalMethod = 'auc',
summarization = 'PCA',
BetweenShrinkage = 5, ncomp_pls = 3)
getwd()
devtools::document
devtools::document()
devtools::document()
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
library(SmCCNet)
devtools::document()
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
devtools::document()
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
devtools::document()
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
devtools::check(build_args = "--compact-vignettes=gs+qpdf")
